#!/usr/bin/env sh

if [[ $1 = "set-touchpad" ]]; then
	device=$(hyprctl devices | grep touchpad | xargs)
	status_file=${XDG_RUNTIME_DIR:-/run/user/$UID}/touchpad-status
	echo $2 > $status_file
	hyprctl keyword device\[$device\]:enabled $2
fi

if [[ $1 = "toggle-touchpad" ]]; then
	device=$(hyprctl devices | grep touchpad | xargs)
	status_file=${XDG_RUNTIME_DIR:-/run/user/$UID}/touchpad-status
	touch $status_file
	case $(<$status_file) in
		true) status=false && notify-send "Touchpad Disabled" ;;
		false) status=true && notify-send "Touchpad Enabled" ;;
		*) status=false && notify-send "Touchpad Disabled" ;;
	esac
	echo $status > $status_file
	hyprctl keyword device\[$device\]:enabled $status
fi

if [[ $1 = "random-wallpaper" ]]; then
	wallpaper=$(fd . ~/wallpapers -E '*.sh' | shuf -n1)
	pgrep hyprpaper || hyprctl keyword exec hyprpaper
	sleep 0.5
	hyprctl hyprpaper preload $wallpaper
	hyprctl hyprpaper wallpaper ,$wallpaper
fi

if [[ $1 = "pick-emoji" ]]; then
	if [[ $2 = "generate" ]]; then
		curl -s https://raw.githubusercontent.com/muan/emojilib/refs/heads/main/dist/emoji-en-US.json \
			| jq 'to_entries | map("\(.key) \(.value | join(", "))")[]' -r > ~/scripts/emoji-picker-data
		exit 0
	fi

	if [[ $2 = "internal" ]]; then
		address=$3
		line=$(fzf --no-hscroll <~/scripts/emoji-picker-data)
		[[ -z $line ]] && exit 1
		hyprctl dispatch focuswindow "address:$address"
		sleep 0.1
		wtype "$(echo $line | cut -d' ' -f1)"
		exit 0
	fi

	address=$(hyprctl activewindow -j | jq .address -r)
	[[ $address = 'null' ]] && exit 1
	hyprctl dispatch exec \
		'[float; size 400 300; bordersize 1; bordercolor rgb(737994)]' \
		"ghostty --window-padding-x=10 --window-padding-y=10 -e '~/scripts/hypr-utils pick-emoji internal $address'"
fi

if [[ $1 = "toggle-scale" ]]; then
	if [[ "$(hyprctl monitors -j | jq 'map(.scale == 1) | all' -r)" = 'true' ]]; then
		hyprctl keyword monitor "desc:, preferred, auto, auto"
	else
		# hyprctl keyword general:gaps_in 0
		# hyprctl keyword general:gaps_out 0
		# hyprctl keyword general:border_size 0
		hyprctl keyword monitor "desc:, preferred, auto, 1.0"
	fi
fi

if [[ $1 = "open-waydroid" ]]; then
	hyprctl dispatch workspace name:android

	if [[ $(systemctl is-enabled waydroid-container) != "enabled" ]]; then
		pkexec systemctl start waydroid-container
		notify-send 'Started waydroid systemd service'
	fi

	if waydroid status | grep -q STOPPED; then
		hyprctl dispatch exec waydroid session start
		notify-send 'Starting waydroid session'
		while ! waydroid status | grep -q RUNNING; do
			sleep 0.5
			notify-send "$(waydroid status)"
		done
		hyprctl dispatch exec waydroid show-full-ui
	fi
fi
